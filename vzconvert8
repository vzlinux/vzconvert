#!/usr/bin/python3

#
# Copyright (c) 2020-2021 Virtuozzo International GmbH. All rights reserved.
#
# Our contact details: Virtuozzo International GmbH, Vordergasse 59, 8200
# Schaffhausen, Switzerland.

import argparse
import subprocess
import datetime
from multiprocessing import Pool
from multiprocessing.dummy import Pool as ThreadPool
import threading
import sys

# It is ok for these packages to be added due to differences between vzlinux8 and centos8 templates
# and default vzlinux requirements
ADDED_PKGS_IGNORE = ['annobin.x86_64', 'cpp.x86_64', 'dnf-plugins-core.noarch', 'fstrm.x86_64', 'gcc.x86_64',
                 'glibc-devel.x86_64', 'glibc-headers.x86_64', 'hwdata.noarch', 'isl.x86_64', 'kernel-headers.x86_64',
                 'libgomp.x86_64', 'libibverbs.x86_64', 'libmpc.x86_64', 'libnl3.x86_64', 'libpkgconf.x86_64',
                 'libxcrypt-devel.x86_64', 'lmdb-libs.x86_64', 'pciutils-libs.x86_64', 'pciutils.x86_64', 'pkgconf-m4.noarch',
                 'pkgconf-pkg-config.x86_64', 'pkgconf.x86_64', 'protobuf-c.x86_64', 'python3-dateutil.noarch',
                 'python3-dnf-plugins-core.noarch', 'rdma-core.x86_64', 'vzlinux-release.x86_64', 'zstd.x86_64',
                 'vzlinux-logos.noarch', 'vzlinux-logos-httpd.noarch']

# The following packages are ok to drop - they are replaced by vzlinux ones
DROPPED_PKGS_IGNORE = ['centos-linux-release.noarch', 'centos-linux-repos.noarch', 'centos-logos-httpd.noarch', 'centos-logos.noarch', 'centos-gpg-keys.noarch']

# There is no harm if some processes became active/inacitve after upgrade.
# mandb & logrotate can be launched by cron;
# 'sh' also comes from rpm_clean cron task.
# 'systemct' (there is no typo here) looks like a ghost in vzps output
CHANGED_PS_IGNORE = ['mandb', 'sh', 'systemct']

# Forbid update if found installed package containing one of the followinf strings in name
BLOCKER_PKGS = {'plesk': 'Plesk', 'cpanel': 'cPanel'}

# Minimum free space we want to see inside the container
SPACE_LIMIT = 1000000

SUPPORTED_REPOS = ['appstream', 'baseos', 'extras', 'powertools', 'epel', 'epel-modular']

'''
Simple log wrapper to print messages to eithe STDOUT or to logfile
'''
def log_info(msg, ct_log=None):
    global logfile
    global lock

    if not ct_log:
        lock.acquire()
    for l in str(msg).split('\n'):
        if 'warning! rpmdb:' in l or 'ERROR: ld.so:' in l:
            continue
        if ct_log:
            ct_log.write(l + "\n")
        elif logfile:
            logfile.write(l + "\n")
        print(l)
        sys.stdout.flush()
    if not ct_log:
        lock.release()


def parse_command_line():
    global args

    parser = argparse.ArgumentParser(description='VzLinux Converter')
    subs = parser.add_subparsers(dest='list or convert')
    subs.required = True

    list_parser = subs.add_parser('list', help='List convertable CentOS 8 containers')
    list_parser.set_defaults(func=get_upgradable)

    upgrade_parser = subs.add_parser('convert', help='Convert the specified containers to VzLinux 8')
    upgrade_parser.add_argument('CT', metavar='CT', nargs='+', help='UUID, CTID, or name of the container to convert')
    upgrade_parser.add_argument('--dry-run', action='store_true', help='Check that conversion is possible, do not actually perform it')
    upgrade_parser.add_argument('-q', '--quiet', action='store_true', help='Be quiet')
    upgrade_parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
    upgrade_parser.add_argument('--log', help='Dump all messages to the specified log file. Detailed messages for every container will be dumped to separate files with the same prefix')
    upgrade_parser.add_argument('--parallel', metavar='parallel', type=int, choices=range(1, 101), nargs='?', help='The number of concurrent conversions to perform')
    upgrade_parser.add_argument('--strict', action='store_true', help='Treat some of the precheck warnings as errors that block conversion')
    upgrade_parser.set_defaults(func=process_cts)

    args = parser.parse_args()


'''
Check CT config - if OSTEMPLATE is set to centos-8
'''
def check_config(ctid):
    vz_private = None
    try:
        with open("/etc/vz/vz.conf") as f:
            for l in f.readlines():
                if l.startswith("VE_PRIVATE"):
                    vz_private = l.strip().split("=")[1].replace('/$VEID', '').replace('"', '').replace("'", '')
                    break
    except Exception as e:
        log_info(ctid + ": Unable to check container config: " + str(e))
        return False

    try:
        f = open(vz_private + "/" + ctid + "/ve.conf", "r")
    except Exception as e:
        log_info(ctid + ": Unable to check container config: " + str(e))
        return False

    for l in f.readlines():
        if 'OSTEMPLATE=".centos-8-x86_64"' in l or 'OSTEMPLATE="centos-8-x86_64"' in l \
                or 'OSTEMPLATE=".centos-8"' in l or 'OSTEMPLATE="centos-8"' in l:
            f.close()
            return True

    f.close()
    return False


'''
Check if we have enough free space inside container.
Return False if not (or when can't check), True if yes
'''
def check_space(ctid):
    df_out = subprocess.check_output(['/sbin/vzctl', 'exec', ctid, 'df', '--output=avail', '/'])
    for l in df_out.decode('utf-8').split("\n"):
        if "vail" in l:
            continue
        free_space = int(l)
        if free_space < SPACE_LIMIT:
            log_info(ctid + ": Not enough free space in the container, at least 1 GB is required")
            return False
        else:
            return True
    log_info(ctid + ": Unable to check free space in the container!")
    return False

'''
Check if we have enabled repos not supported by upgrade.
Return False if yes (or when can't check), True if no
'''
def check_repos(ctid):
    try:
        dnf_out = subprocess.check_output(['/sbin/vzctl', 'exec', ctid, 'dnf', 'repolist', 'enabled'])
    except Exception as e:
        log_info(ctid + ": Unable to check the repositories in the container! " + str(e))
        return False

    for l in dnf_out.decode('utf-8').split("\n"):
        if "repo name" in l:
            continue
        repo_id = l.split(" ")[0]
        if repo_id and repo_id not in SUPPORTED_REPOS:
            log_info(ctid + ": The following unsupported repository is enabled in the container: " + str(repo_id))
            return False

    return True

'''
Get list of ports open inside CT.
We get list of ports using lsof (since netstat is not available by default)
For every port we save command, protocol, node and port number
'''
def get_open_ports(ctid):
    l = subprocess.check_output(['/sbin/vzctl', 'exec', ctid, '/bin/lsof', '-Pi'])
    all_ports = []
    for p in l.decode('utf-8').split('\n'):
        data = p.split()
        if len(data) > 8:
            all_ports.append((data[0], data[4], data[7], data[8]))
    return all_ports

def try_stop_ct(ctid):
    try:
        res = subprocess.check_output(['/sbin/vzctl', 'stop', ctid]).decode('utf-8')
        log_info(res)
    except Exception as e:
        log_info(ctid + ": Failed to stop the container: " + str(e))

'''
Perform conversion of containers specified in cmdline
'''
def process_cts():
    global args
    global logfile
    global lock

    lock = threading.Lock()
    logfile = None
    if args.log:
        logfile = open(args.log, "w")

    if args.parallel:
        pool = ThreadPool(args.parallel)
    else:
        pool = ThreadPool(1)

    results = pool.map(process_single_ct, args.CT)

    pool.close()
    pool.join()

    if args.log:
        logfile.close()


'''
A thread function processing single CT
'''
def process_single_ct(ct):
    global args

    try:
        ctid = subprocess.check_output(['/sbin/vzlist', '-o', 'ctid', ct]).decode('utf-8')
    except Exception as e:
        log_info("Failed to get info for container %s" % ct)
        return

    for l in ctid.split("\n"):
        if 'CTID' not in l:
            ct = str(l).strip()
            break

    if not check_config(ct):
        log_info(ct + ": Conversion aborted: Container's OS template is not supported")
        return

    need_stop = False
    ct_state = subprocess.check_output(['/sbin/vzctl', 'status', ct]).decode('utf-8')
    if not "running" in ct_state:
        log_info(ct + ": Container is stopped. Starting container...")
        try:
            res = subprocess.check_output(['/sbin/vzctl', 'start', ct, '--wait']).decode('utf-8')
            log_info(res)
        except Exception as e:
            log_info(ct + ": Failed to start: " + str(e))
            return
        need_stop = True

    old_pkg_list_raw = subprocess.check_output(['/sbin/vzpkg', 'list', '-p', ct]).decode('utf-8')
    proceed = True
    for b in BLOCKER_PKGS:
        if b in old_pkg_list_raw:
            log_info(ct + ": " + "Conversion aborted: Software unsupported by VzLinux 8 detected: " + BLOCKER_PKGS[b])
            proceed = False
    if not proceed:
        if need_stop:
            try_stop_ct(ctid)
        return

    if not check_space(ct):
        if not args.strict:
            log_info(ct + ": Warning! May not be enough free space in the container")
        else:
            log_info(ct + ": Conversion aborted: May not be enough free space in the container")
            if need_stop:
                try_stop_ct(ctid)
            return

    if not check_repos(ct):
        if not args.strict:
            log_info(ct + ": Warning! Unsupported repositories detected")
        else:
            log_info(ct + ": Conversion aborted: Unsupported repositories detected")
            if need_stop:
                try_stop_ct(ctid)
            return

    if not args.dry_run:
        snaphost_out = subprocess.check_output(['/bin/prlctl', 'snapshot', ct, '-n', 'pre-vzlinux8'])
        log_info(ct + ": " + snaphost_out.decode('utf-8'))
        old_proc_list = sorted(set(subprocess.check_output(['/bin/vzps', '-Ao', 'fname', '-E', ct]).decode('utf-8').split("\n")))
        old_pkg_list = old_pkg_list_raw.split("\n")
        old_pkg_list = [p.split(" ")[0] for p in old_pkg_list]
        old_ports_list = sorted(set(get_open_ports(ct)))


    vzdeploy_args = ['-n']
    if args.quiet:
        vzdeploy_args.append('-q')
    elif args.verbose:
        vzdeploy_args.append('-v')
    if args.dry_run:
        vzdeploy_args.append('-d')

    vzdeploy_args.append('-c')
    vzdeploy_args.append(ct)

    log_info("Starting conversion: " + ct + " at " + str(datetime.datetime.now().time()))
    pr = subprocess.Popen(['/bin/vzdeploy8_ct'] + vzdeploy_args, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=1)
    if args.log:
        ct_log = open(args.log + "." + ct, "w")
    while True:
        l = pr.stdout.readline()
        if l == '' and pr.poll() != None:
            break
        if 'Warning! rpmdb:' in l or 'ERROR: ld.so:' in l:
            continue
        if l:
            log_info(l.strip(), ct_log)
    if args.log:
        ct_log.close()

    if not args.dry_run:
        save_timestamp(ct)
        new_proc_list = sorted(set(subprocess.check_output(['/bin/vzps', '-Ao', 'fname', '-E', ct]).decode('utf-8').split("\n")))
        new_pkg_list = subprocess.check_output(['/sbin/vzpkg', 'list', '-p', ct]).decode('utf-8').split("\n")
        new_pkg_list = [p.split(" ")[0] for p in new_pkg_list]
        new_ports_list = sorted(set(get_open_ports(ct)))
        added_pkgs = [p for p in new_pkg_list if p.replace("vl7", "el7") not in old_pkg_list and p not in ADDED_PKGS_IGNORE]
        removed_pkgs = [p for p in old_pkg_list if p.replace("el7", "vl7") not in new_pkg_list and p not in DROPPED_PKGS_IGNORE]
        added_ps = [p for p in new_proc_list if p not in old_proc_list and p not in CHANGED_PS_IGNORE]
        removed_ps = [p for p in old_proc_list if p not in new_proc_list and p not in CHANGED_PS_IGNORE]
        added_ports = [p for p in new_ports_list if p not in old_ports_list]
        removed_ports = [p for p in old_ports_list if p not in new_ports_list]
        if added_pkgs:
            msg = ct + ": Warning!\nThe following packages were added compared to CentOS 8:" + str(added_pkgs)
            log_info(msg)
        if removed_pkgs:
            msg = ct + ": Warning!\nThe following packages were removed compared to CentOS 8:" + str(removed_pkgs)
            log_info(msg)
        if added_ps:
            msg = ct + ": Warning!\nThe following processes became active compared to CentOS 8:" + str(added_ps)
            log_info(msg)
        if removed_ps:
            msg = ct + ": Warning!\nThe following processes became inactive compared to CentOS 8:" + str(removed_ps)
            log_info(msg)
        if added_ports:
            msg = ct + ": Warning!\nThe following ports were open compared to CentOS 8:" + str(added_ports)
            log_info(msg)
        if removed_ports:
            msg = ct + ": Warning!\nThe following ports were closed compared to CentOS 8:" + str(removed_ports)
            log_info(msg)

    if need_stop:
        try_stop_ct(ct)

    log_info(ct + ": Conversion successful at " + str(datetime.datetime.now().time()))


'''
Save conversion timestamp inside container.
Useful for CEP to know that the container was converted
'''
def save_timestamp(ctid):
    subprocess.call(['/sbin/vzctl', 'exec', ctid, '/bin/touch', '/var/log/vzconvert8.stamp'])

def get_upgradable():
    all_ct = subprocess.check_output(['/sbin/vzlist', '-a', '-o', 'ostemplate,ctid,name'])
    for l in all_ct.decode('utf-8').split("\n"):
        try:
            parts = l.split()
            ostemplate = parts[0]
        except:
            continue
        if ostemplate.endswith('centos-8-x86_64') or ostemplate.endswith('centos-8'):
            print("%s (%s)" % (parts[2], parts[1]))

if __name__ == '__main__':
    global args
    parse_command_line()
    args.func()

